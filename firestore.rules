rules_version = '2';
service cloud.firestore {
match /databases/{database}/documents {
function isAuthenticated() {
  return request.auth != null;
}
function isUserAuthenticated(userID) {
  return request.auth.uid == userID;
}
// videoのデータはregisterCount とstarPointと、viewCountのみ更新できるようにする
function canUpdateVideoData(){
   return request.resource.data.channelId == resource.data.channelId 
   &&  request.resource.data.channelTitle == resource.data.channelTitle
   &&  request.resource.data.thumbnail == resource.data.thumbnail
   &&  request.resource.data.videoTitle == resource.data.videoTitle
} 
 
match /YouTubers_basic_info/{channelId}{
   allow read: if true;
   allow create: if isAuthenticated();
   allow update: if isAuthenticated();
 }
match /genreTag/{tagId}{
   allow read: if true;
}
match /materialTag/{tagId}{
   allow read: if true;
}
match /menuTag/{tagId}{
   allow read: if true;
}
match /timeTag/{tagId}{
   allow read: if true;
}
match /video_info/{videoId}{
   allow read: if true;
   allow create: if isAuthenticated();
   allow update: if isAuthenticated() ;
}

match /userPublicInfo/{userId}{
  allow read: if true;
  allow create: if isAuthenticated() && isUserAuthenticated(userId);
  allow update: if isAuthenticated() && isUserAuthenticated(userId);
  match /favorite_VTR/{docId}{
     allow create: if isAuthenticated() && isUserAuthenticated(userId);
     allow update: if isAuthenticated() && isUserAuthenticated(userId);
     allow read: if true;
     allow delete: if isAuthenticated() && isUserAuthenticated(userId);
  }
}
}}
